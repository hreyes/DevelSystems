//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 04/04/2022 3:46:33
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using DevelSystem;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.AspNetCore.Identity;

namespace DevelSystem.Data
{

    public partial class ApplicationDbContext :  IdentityDbContext<IdentityUser>
    {

        public ApplicationDbContext() :
            base()
        {
            OnCreated();
        }

        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=localhost\SQLEXPRESS;Initial Catalog=aspnet-DevelSystems-F65BF4E9-1554-4C02-9C6B-B0716E236ED8;Integrated Security=True;MultipleActiveResultSets=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<DevelSystem.Models.Encuesta> Encuestas
        {
            get;
            set;
        }

        public virtual DbSet<DevelSystem.Models.Pregunta> Preguntas
        {
            get;
            set;
        }

        public virtual DbSet<Respuesta> Respuestas
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.EncuestaMapping(modelBuilder);
            this.CustomizeEncuestaMapping(modelBuilder);

            this.PreguntaMapping(modelBuilder);
            this.CustomizePreguntaMapping(modelBuilder);

            this.RespuestaMapping(modelBuilder);
            this.CustomizeRespuestaMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region Encuesta Mapping

        private void EncuestaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DevelSystem.Models.Encuesta>().ToTable(@"Encuestas");
            modelBuilder.Entity<DevelSystem.Models.Encuesta>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<DevelSystem.Models.Encuesta>().Property(x => x.Nombre).HasColumnName(@"Nombre").IsRequired().ValueGeneratedNever().HasMaxLength(255);
            modelBuilder.Entity<DevelSystem.Models.Encuesta>().Property(x => x.Descripcion).HasColumnName(@"Descripcion").IsRequired().ValueGeneratedNever().HasMaxLength(500);
            modelBuilder.Entity<DevelSystem.Models.Encuesta>().Property(x => x.Url).HasColumnName(@"Url").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DevelSystem.Models.Encuesta>().HasKey(@"Id");
        }

        partial void CustomizeEncuestaMapping(ModelBuilder modelBuilder);

        #endregion

        #region Pregunta Mapping

        private void PreguntaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DevelSystem.Models.Pregunta>().ToTable(@"Preguntas");
            modelBuilder.Entity<DevelSystem.Models.Pregunta>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<DevelSystem.Models.Pregunta>().Property(x => x.Nombre).HasColumnName(@"Nombre").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DevelSystem.Models.Pregunta>().Property(x => x.Titulo).HasColumnName(@"Titulo").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DevelSystem.Models.Pregunta>().Property(x => x.Requerido).HasColumnName(@"Requerido").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DevelSystem.Models.Pregunta>().Property(x => x.Tipo).HasColumnName(@"Tipo").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<DevelSystem.Models.Pregunta>().Property(x => x.EncuestaId).HasColumnName(@"EncuestaId").ValueGeneratedNever();
            modelBuilder.Entity<DevelSystem.Models.Pregunta>().HasKey(@"Id");
        }

        partial void CustomizePreguntaMapping(ModelBuilder modelBuilder);

        #endregion

        #region Respuesta Mapping

        private void RespuestaMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Respuesta>().ToTable(@"Respuestas");
            modelBuilder.Entity<Respuesta>().Property(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Respuesta>().Property(x => x.ValorRespuesta).HasColumnName(@"ValorRespuesta").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Respuesta>().Property(x => x.Titulo).HasColumnName(@"Titulo").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Respuesta>().Property(x => x.EncuestaId).HasColumnName(@"EncuestaId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Respuesta>().Property(x => x.PreguntaId).HasColumnName(@"PreguntaId").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Respuesta>().HasKey(@"Id");
        }

        partial void CustomizeRespuestaMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DevelSystem.Models.Encuesta>().HasMany(x => x.Preguntas).WithOne().OnDelete(DeleteBehavior.Cascade).HasForeignKey(@"EncuestaId").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
